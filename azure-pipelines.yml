trigger:
- main  # The pipeline will be triggered when changes are pushed to the 'main' branch

pool:
  name: 'Default'  # Use the default agent pool for running the pipeline
  demands:
  - agent.name -equals DESKTOP-7HI2KQN  # Ensure the pipeline runs only on the specified self-hosted agent

variables:
- group: EmailCredentials  # Link the variable group containing secure email credentials (EmailUsername and EmailPassword)

steps:
# Step 1: Verify Java Installation
- script: |
    java -version  # Check the installed version of Java
    javac -version  # Check the installed version of the Java compiler
  displayName: 'Verify Java Installation'

# Step 2: Compile the Java Project
- script: |
    mkdir build  # Create a directory named 'build' for compiled files
    javac -d build Main.java  # Compile Main.java and place the resulting .class file(s) in the 'build' directory
  displayName: 'Compile Java Project'

# Step 3: Run the Compiled Java Program
- script: |
    java -cp build Main  # Run the compiled Main.class file from the 'build' directory
  displayName: 'Run Compiled Java Program'

# Step 4: Copy Output Artifacts
- script: |
    mkdir C:\IT  # Create the target directory (C:\IT) if it doesn't exist
    copy output.txt C:\IT\  # Copy the output.txt file to C:\IT
  displayName: 'Copy Artifacts to C:\\IT'

# Step 5: Create Version Stamp
- task: PowerShell@2
  displayName: 'Create Version Stamp'
  inputs:
    targetType: inline
    script: |
      $versionStampFile = "C:\IT\VersionStamp.txt"  # Define the file path for storing the version stamp

      # Check if the version stamp file already exists
      if (Test-Path $versionStampFile) {
          # If the file exists, read the current version from the file
          $currentVersion = Get-Content $versionStampFile
      } else {
          # If the file doesn't exist, initialize the version as 1.0.0
          $currentVersion = "1.0.0"
      }

      # Split the current version string into components: major, minor, and patch
      $versionParts = $currentVersion.Split('.')  # Example: "1.0.0" -> @("1", "0", "0")
      $major = [int]$versionParts[0]  # Extract the major version (e.g., 1)
      $minor = [int]$versionParts[1]  # Extract the minor version (e.g., 0)
      $patch = [int]$versionParts[2]  # Extract the patch version (e.g., 0)

      # Increment the patch version
      $patch += 1  # Add 1 to the patch version
      if ($patch -ge 10) {  # Check if the patch version has reached 10
          $patch = 0  # Reset the patch version to 0
          $minor += 1  # Increment the minor version
      }
      if ($minor -ge 10) {  # Check if the minor version has reached 10
          $minor = 0  # Reset the minor version to 0
          $major += 1  # Increment the major version
      }

      # Construct the new version string using the updated components
      $newVersion = "$major.$minor.$patch"  # Example: "1.0.1" or "2.0.0"

      # Save the updated version string to the version stamp file
      Set-Content -Path $versionStampFile -Value $newVersion

      # Log the updated version for visibility in the pipeline output
      Write-Host "Version stamp updated to: $newVersion"

      # Set the updated version as a pipeline variable for use in subsequent steps
      Write-Host "##vso[task.setvariable variable=versionNumber]$newVersion"

# Step 6: Send Email Notification
- task: PowerShell@2
  displayName: 'Send Email Notification'
  inputs:
    targetType: inline
    script: |
      $to = "sam.albershtein@gmail.com"  # Recipient email address
      $from = "$(EmailUsername)"  # Sender email address (from the secure variable group)
      $subject = "Pipeline Run Status"  # Email subject line
      $body = "Pipeline ran successfully. New version: $(versionNumber)"  # Email body with the updated version number
      $smtpServer = "smtp.gmail.com"  # Gmail SMTP server address
      $smtpPort = 587  # SMTP port for sending emails with TLS
      $username = "$(EmailUsername)"  # Username for the Gmail account (from the secure variable group)
      $password = "$(EmailPassword)"  # App-specific password for Gmail (from the secure variable group)
      $securePassword = ConvertTo-SecureString $password -AsPlainText -Force  # Convert the password to a secure string
      $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)  # Create a credential object

      # Send the email using the configured SMTP server and credentials
      Send-MailMessage -To $to -From $from -Subject $subject -Body $body -SmtpServer $smtpServer -Port $smtpPort -UseSsl -Credential $credential
  condition: succeeded()  # Run this step only if the previous steps succeed
