trigger:
- main

pool:
  name: 'Default'  
  demands:
  - agent.name -equals DESKTOP-7HI2KQN

variables:
- group: EmailCredentials  # Link the variable group for SMTP #

steps:
# Step 1: Set up the Java environment
- script: |
    java -version
    javac -version
  displayName: 'Verify Java Installation'

# Step 2: Compile the Java project
- script: |
    mkdir build
    javac -d build Main.java
  displayName: 'Compile Java Project'

# Step 3: Run the compiled Java program
- script: |
    java -cp build Main
  displayName: 'Run Compiled Java Program'

- script: |
    mkdir C:\IT
    copy /Y output.txt C:\IT\
  displayName: 'Copy Artifacts to C:\\IT'

- task: PowerShell@2
  displayName: 'Create Version Stamp'
  inputs:
    targetType: inline
    script: |
      $versionStampFile = "C:\IT\VersionStamp.txt"

      # Check if the version stamp file exists
      if (Test-Path $versionStampFile) {
          # Read the current version from the file
          $currentVersion = Get-Content $versionStampFile
      } else {
          # Default to 1.0.0 if the file doesn't exist
          $currentVersion = "1.0.0"
      }

      # Split the version string into parts (major.minor.patch)
      $versionParts = $currentVersion.Split('.')
      $major = [int]$versionParts[0]
      $minor = [int]$versionParts[1]
      $patch = [int]$versionParts[2]

      # Split the version into components (major.minor.patch) and increment the patch version
      # Example: For $currentVersion = "1.0.0":
      # $versionParts = $currentVersion.Split('.') => @("1", "0", "0")
      # $versionParts[2] = [int]$versionParts[2] + 1 increments the patch => @("1", "0", "1")
      # $newVersion = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2])" reconstructs the version => "1.0.1"

      # Increment the version
      $patch += 1  # Increment the patch version
      if ($patch -ge 10) {
          $patch = 0
          $minor += 1  # Roll over to the next minor version
      }
      if ($minor -ge 10) {
          $minor = 0
          $major += 1  # Roll over to the next major version
      }

      # Construct the new version
      $newVersion = "$major.$minor.$patch"

      # Save the new version to the file
      Set-Content -Path $versionStampFile -Value $newVersion

      # Log the new version and set it as a pipeline variable
      Write-Host "Version stamp updated to: $newVersion"
      Write-Host "##vso[task.setvariable variable=versionNumber]$newVersion"


- task: PowerShell@2
  displayName: 'Send Email Notification'
  inputs:
    targetType: inline
    script: |
      $to = "sam.albershtein@gmail.com"
      $from = "$(EmailUsername)"
      $subject = "Pipeline Run Status"
      $body = "Pipeline ran successfully. New version: $(versionNumber)"
      $smtpServer = "smtp.gmail.com"
      $smtpPort = 587
      $username = "$(EmailUsername)"
      $password = "$(EmailPassword)"
      $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

      Send-MailMessage -To $to -From $from -Subject $subject -Body $body -SmtpServer $smtpServer -Port $smtpPort -UseSsl -Credential $credential
  condition: succeeded()

